#x`x`!/bin/python3
import sys
"""
# Description
# 
# Sudoku is a number-placement puzzle. The objective is to fill a 9 × 9 grid 
# with digits so that each column, each row, and each of the nine 3 × 3 
# sub-grids that compose the grid contains all of the digits from 1 to 9.
#
# This algorithm should check if the given grid of numbers represents a correct
#  solution to Sudoku.
# Example
#
# For the first example below, the output should be true. For the other grid, 
# the output should be false: each of the nine 3 × 3 sub-grids should contain 
# all of the digits from 1 to 9.
#
#               Example 1                               Example 2
# --------------------------------------+--------------------------------------
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 1 | 3 | 2 | 4 | 5 | 6 | 9 | 8 | 7 | | | 1 | 3 | 4 | 2 | 5 | 6 | 9 | 8 | 7 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 4 | 6 | 5 | 8 | 7 | 9 | 3 | 2 | 1 | | | 4 | 6 | 8 | 5 | 7 | 9 | 3 | 2 | 1 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 7 | 9 | 8 | 2 | 1 | 3 | 6 | 5 | 4 | | | 7 | 9 | 2 | 8 | 1 | 3 | 6 | 5 | 4 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 9 | 2 | 1 | 4 | 3 | 5 | 8 | 7 | 6 | | | 9 | 2 | 3 | 1 | 4 | 5 | 8 | 7 | 6 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 3 | 5 | 4 | 7 | 6 | 8 | 2 | 1 | 9 | | | 3 | 5 | 7 | 4 | 6 | 8 | 2 | 1 | 9 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 6 | 8 | 7 | 1 | 9 | 2 | 5 | 4 | 3 | | | 6 | 8 | 1 | 7 | 9 | 2 | 5 | 4 | 3 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 5 | 7 | 6 | 9 | 8 | 1 | 4 | 3 | 2 | | | 5 | 7 | 6 | 9 | 8 | 1 | 4 | 3 | 2 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 2 | 4 | 3 | 6 | 5 | 7 | 1 | 9 | 8 | | | 2 | 4 | 5 | 6 | 3 | 7 | 1 | 9 | 8 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
# | 8 | 1 | 9 | 3 | 2 | 4 | 7 | 6 | 5 | | | 8 | 1 | 9 | 3 | 2 | 4 | 7 | 6 | 5 |
# +---+---+---+---+---+---+---+---+---+ | +---+---+---+---+---+---+---+---+---+
#
# 1 = (0-2, 0-2)
# 2 = (0-2, 3-5)
# 3 = (0-2, 6-8)
# 4 = (3-5, 0-2)
# 5 = (3-5, 3-5)
# 6 = (3-5, 6-8)
# 7 = (6-8, 0-2)
# 8 = (6-8, 3-5)
# 9 = (6-8, 6-8)
#
# Input/Output
#
# [input] array.array.integer grid
# A matrix representing 9 × 9 grid already filled with numbers from 1 to 9.
#
# [output] boolean
# true if the given grid represents a correct solution to Sudoku, false otherwise.
#
# Solution:
"""
##############
# SOLUTION 1 #
##############
def sudoku(grid):
    for col in range(9):
        colSet = set()
        for row in range(9):
            colSet.add(grid[row][col])
        if len(colSet) != 9:
            return False
        
    for row in range(9):
        rowSet = set()
        if row in (0,3,6):
            set1 = set()
            set2 = set()
            set3 = set()
        for col in range(9):
            rowSet.add(grid[row][col])
            if 0 <= col <= 2:
                set1.add(grid[row][col])
            elif 3 <= col <= 5:
                set2.add(grid[row][col])
            else:
                set3.add(grid[row][col])
        if ((row in (2,5,8) and (len(set1) != 9 or len(set2) != 9 or len(set3) != 9)) or
            (col == 8 and len(rowSet) != 9)):
            return False    
    return True



print(sudoku([[1,3,2,5,4,6,9,8,7], 
              [4,6,5,8,7,9,3,2,1], 
              [7,9,8,2,1,3,6,5,4], 
              [9,2,1,4,3,5,8,7,6], 
              [3,5,4,7,6,8,2,1,9], 
              [6,8,7,1,9,2,5,4,3], 
              [5,7,6,9,8,1,4,3,2], 
              [2,4,3,6,5,7,1,9,8], 
              [8,1,9,3,2,4,7,6,5]]))      # True
    
print(sudoku([[1,3,2,5,4,6,9,2,7], 
              [4,6,5,8,7,9,3,8,1], 
              [7,9,8,2,1,3,6,5,4], 
              [9,2,1,4,3,5,8,7,6], 
              [3,5,4,7,6,8,2,1,9], 
              [6,8,7,1,9,2,5,4,3], 
              [5,7,6,9,8,1,4,3,2], 
              [2,4,3,6,5,7,1,9,8], 
              [8,1,9,3,2,4,7,6,5]]))      # False
    
print(sudoku([[1,3,4,2,5,6,9,8,7], 
              [4,6,8,5,7,9,3,2,1], 
              [7,9,2,8,1,3,6,5,4], 
              [9,2,3,1,4,5,8,7,6], 
              [3,5,7,4,6,8,2,1,9], 
              [6,8,1,7,9,2,5,4,3], 
              [5,7,6,9,8,1,4,3,2], 
              [2,4,5,6,3,7,1,9,8], 
              [8,1,9,3,2,4,7,6,5]]))       # False
    
print(sudoku([[1,3,2,5,4,6,9,8,7], 
              [4,6,5,8,7,9,3,2,1], 
              [7,9,8,2,1,3,6,5,4], 
              [9,2,1,4,3,5,8,7,6], 
              [3,5,4,7,6,8,2,1,9], 
              [6,8,7,1,9,2,5,4,3], 
              [5,4,6,9,8,1,4,3,2], 
              [2,7,3,6,5,7,1,9,8], 
              [8,1,9,3,2,4,7,6,5]]))      # False
    
print(sudoku([[1,2,3,4,5,6,7,8,9], 
              [4,6,5,8,7,9,3,2,1], 
              [7,9,8,2,1,3,6,5,4], 
              [1,2,3,4,5,6,7,8,9], 
              [4,6,5,8,7,9,3,2,1], 
              [7,9,8,2,1,3,6,5,4], 
              [1,2,3,4,5,6,7,8,9], 
              [4,6,5,8,7,9,3,2,1], 
              [7,9,8,2,1,3,6,5,4]]))     # False    
    
print(sudoku([[5,3,4,6,7,8,9,1,2], 
              [6,7,2,1,9,5,3,4,8], 
              [1,9,8,3,4,2,5,6,7], 
              [8,5,9,9,6,1,4,2,3], 
              [4,2,6,8,5,3,7,9,1], 
              [7,1,3,7,2,4,8,5,6], 
              [9,6,1,5,3,7,2,8,4], 
              [2,8,7,4,1,9,6,3,5], 
              [3,4,5,2,8,6,1,7,9]]))     # False    
    
print(sudoku([[5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5], 
              [5,5,5,5,5,5,5,5,5]]))     # False
    
